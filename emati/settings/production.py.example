"""
Django settings for emati project.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import logging
import sys
from elasticsearch import Elasticsearch
from django.contrib.messages import constants as messages

# Define this project's root directory
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# (BASE_DIR is defined in relation to this settings file's location)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Adds 'emati/apps' to the python path. This let's Django find our apps.
sys.path.insert(0, os.path.join(BASE_DIR, 'emati', 'apps'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'YOUR_SECRET_KEY'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['www.yourhost.com']


#------------------------------------------------------------------------------
# Application definition
#------------------------------------------------------------------------------

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Our main app
    'website',

    # Custom administrative app
    'dashboard',

    # User management
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',

    # Delete actual files if a model object with a FileField is deleted:
    'django_cleanup',

    # Provides useful things like: AutoOneToOneField, ...
    'annoying',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'website.middleware.TermsAgreementMiddleware',
]

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend"
)

ROOT_URLCONF = 'emati.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'), 
            os.path.join(BASE_DIR, 'templates', 'website'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
            os.path.join(BASE_DIR, 'templates', 'dashboard'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'emati.wsgi.application'

#------------------------------------------------------------------------------
# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
#------------------------------------------------------------------------------

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': 'YOUR_DATABASE_NAME',
        'USER': 'YOUR_USER',
        'PASSWORD': 'PASSWORD_FOR_THAT_USER',
        'HOST': 'WHERE_THE_DB_IS_HOSTED',
        'PORT': '3306',
    }
}


#------------------------------------------------------------------------------
# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators
#------------------------------------------------------------------------------

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#----------------------------------------------------
# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/
#----------------------------------------------------

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Berlin'

# Turn off Django's translation system
USE_I18N = False
USE_L10N = True
USE_THOUSAND_SEPARATOR = True

# Use timezone-aware datetimes
USE_TZ = True


#----------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
#----------------------------------------------------------

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Absolute filesystem path to the directory that will hold 
# user-uploaded files, classifiers
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


#----------------------------------------------------------
# AllAuth
# https://django-allauth.readthedocs.io/en/latest/index.html
#----------------------------------------------------------

# Required for allauth
SITE_ID = 1

# Where to redirect after successful login/logout
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'welcome'

# Mandatory email confirmation but only when registering via email/password
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

# Confirm email address simply by clicking a link
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# Do not log out after changing the password
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False

# Login with email-address (email works as username)
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False

# When displaying users simply show their email address
ACCOUNT_USER_DISPLAY = lambda u: u.email

# Don't show the "Remember me" checkbox. Set it to always checked.
ACCOUNT_SESSION_REMEMBER = True

# Override the default forms with custom ones
# http://django-allauth.readthedocs.io/en/latest/forms.html#account-forms
ACCOUNT_FORMS = {
    'login': 'website.forms.MyLoginForm',
    'signup': 'website.forms.MySignupForm',
    'reset_password': 'website.forms.MyResetPasswordForm',
}

# Request the email address even when registering with a third party account
# provider (google, facebook, ...)
SOCIALACCOUNT_QUERY_EMAIL = True

# Register third party account providers and specify which information we need
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'https'},
        # Technically we don't know whether the email can be considered
        # verified just because the account is verified. A Facebook account
        # can be confirmed via credit card or phone as well. But let's not be
        # that paranoid. We consider the connected email as verified:
        'VERIFIED_EMAIL': True,
        'VERSION': 'v2.12',
    },
}

# Disable logout confirmation page ("Are you sure you want to log out?")
ACCOUNT_LOGOUT_ON_GET = True

# Configuration for sending emails (e.g. newsletter)
EMAIL_USE_TLS = True
EMAIL_HOST = 'your.smtp.mail.com'
EMAIL_HOST_USER = 'you@mail.com'
EMAIL_HOST_PASSWORD = 'yourpassword'
EMAIL_PORT = 587

# Default email address to use for various automated correspondence from the site manager.
# Doesn't include error messages sent to Admins. For those see SERVER_EMAIL.
DEFAULT_FROM_EMAIL = 'webmaster@localhost'


#------------------------------------------------------------
# Messages
# https://docs.djangoproject.com/en/2.1/ref/contrib/messages/
#------------------------------------------------------------

# Custom message tags
# They are usually passed as css classes
MESSAGE_TAGS = {
    messages.DEBUG: 'message-debug',
    messages.INFO: 'message-info',
    messages.SUCCESS: 'message-success',
    messages.WARNING: 'message-warning',
    messages.ERROR: 'message-error',
}

# Lowest notification level that is processed
if DEBUG:
    MESSAGE_LEVEL = messages.DEBUG
else:
    MESSAGE_LEVEL = messages.INFO


#---------------------------------
# Project specific configuration
#---------------------------------

# Specify sources that are used to load new papers
FETCHING_SOURCES = [
    'fetching.sources.arxiv.Arxiv',
    'fetching.sources.pubmed.Pubmed',
]

# Number of papers to download at once when fetching
FETCHING_BATCH_SIZE = 1000

# Querying PubMed requires an email and a key
FETCHING_PUBMED_EMAIL = 'your@mail.com'
FETCHING_PUBMED_API_KEY = 'YOUR_PUBMED_API_KEY'

# Desired abstract length in characters
WEBSITE_ABSTRACT_LENGTH = 200

# How many articles to show at once on the main page
WEBSITE_PAGINATE_BY = 10

# Maximum number of files a user can upload
WEBSITE_UPLOAD_MAX_FILES = 10

# The maximum size each uploaded file may be (in bytes)
WEBSITE_UPLOAD_MAX_FILESIZE = 2*1024*1024

# Supported filetypes. Everything not in this list will be ignored.
WEBSITE_UPLOAD_VALID_FILETYPES = ['.bib', '.ris', '.xml']

# Mail address displayed on the "Contact" page
WEBSITE_CONTACT_EMAIL = 'contact@emati.de'

# Sender and subject of weekly newsletters
WEBSITE_NEWSLETTER_SUBJECT = 'Emati Newsletter'
WEBSITE_NEWSLETTER_SENDER = 'news@emati.de'

# Initiate the global search client
WEBSITE_SEARCH_CLIENT = Elasticsearch(
    ['localhost'],
    http_auth=('user', 'secret'),
    scheme="https",
    port=443,
)

# Name of the elasticsearch index
WEBSITE_SEARCH_INDEX = 'article'

# The maximum number of search results retrieved from the search index on each
# search request, which are then ranked using the user's classifier
WEBSITE_SEARCH_MAX_RESULTS = 3000

DASHBOARD_PROJECT_REPOSITORY = 'https://projects.biotec.tu-dresden.de/redmine/projects/emati-de/'

#--------------------------------------------------------
# Logging
# https://docs.djangoproject.com/en/2.1/topics/logging/
#--------------------------------------------------------

# Error notifications will be sent to these addresses
ADMINS = [
    ('yourname', 'your.name@email.com')
]

# The email address that error messages come from.
SERVER_EMAIL = 'root@locahost'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'standard': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'null': {
            'class': 'logging.NullHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'standard',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/out.log',
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARNING',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'py.warnings': {
            'handlers': ['console'],
        },
        'dashboard': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG'
        },
        'website': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG'
        },
        'fetching': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG'
        },
        'machinelearning': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG'
        },
    }
}